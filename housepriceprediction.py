# -*- coding: utf-8 -*-
"""HousePricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pug7lz8Lo9Yi90PGsAEuRSe24gEiDyxd

Importing dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import accuracy_score
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_val_score

df = pd.read_csv('train[1].csv')

df.shape

df.sample(5)

df.drop('ADDRESS',axis=1,inplace=True) #Nearly equal value of Longitude and Latitude gives idea about the similar locations , so we can drop the column 'ADDRESS

df.info()

"""Let's apply OneHotEncoding on columns : 'BHK_OR_RK' , 'POSTED_BY'"""

from sklearn.preprocessing import OneHotEncoder

ohe = OneHotEncoder()
feature_array = ohe.fit_transform(df[['BHK_OR_RK', 'POSTED_BY']]).toarray()
feature_labels = ohe.get_feature_names_out(['BHK_OR_RK', 'POSTED_BY'])
features = pd.DataFrame(feature_array, columns=feature_labels)
df = pd.concat([df, features], axis=1)
df.drop(['BHK_OR_RK', 'POSTED_BY'], axis=1, inplace=True)

df.describe()

sns.histplot(df['BHK_NO.'])
plt.show()

sns.boxplot(df['BHK_NO.'])
plt.show()

df = df[df['BHK_NO.']<=5]

sns.histplot(df['BHK_NO.'])
plt.show()

sns.boxplot(df['SQUARE_FT'])
plt.show()

def no_of_outliers(df,col):
  # Calculate IQR for 'SQUARE_FT'
  Q1 = df[col].quantile(0.25)
  Q3 = df[col].quantile(0.75)
  IQR = Q3 - Q1

  # Define lower and upper bounds
  lower_bound = Q1 - 1.5 * IQR
  upper_bound = Q3 + 1.5 * IQR

  print(f"Lower Bound: {max(0,lower_bound)}")
  print(f"Upper Bound: {upper_bound}")
  count_greater_than_upper_bound = len(df[df[col] > upper_bound])
  print(f"Number of values greater than upper_bound in {col}: {count_greater_than_upper_bound}")

no_of_outliers(df,'SQUARE_FT')

def no_of_values_above(df, col, threshold):
    count = len(df[df[col] > threshold])
    return count

no_of_values_above(df,'SQUARE_FT',5000)

df = df[df['SQUARE_FT']<=5000]

sns.histplot(df['TARGET(PRICE_IN_LACS)'],bins=50, kde=True)
plt.show()

sns.boxplot(df['TARGET(PRICE_IN_LACS)'])
plt.show()

no_of_outliers(df,'TARGET(PRICE_IN_LACS)')

df.describe()

no_of_values_above(df,'TARGET(PRICE_IN_LACS)',800)

df = df[df['TARGET(PRICE_IN_LACS)']<=800]

sns.histplot(df['TARGET(PRICE_IN_LACS)'],bins=50, kde=True)
plt.show()

df.describe()

df.shape

df.info()

plt.figure(figsize=(10,6))
sns.scatterplot(x='SQUARE_FT', y='TARGET(PRICE_IN_LACS)', data=df)
plt.xlabel('SQUARE_FT')
plt.ylabel('TARGET(PRICE_IN_LACS)')
plt.title('SQUARE_FT vs TARGET(PRICE_IN_LACS)')
plt.show()

"""# Let's split the data"""

X = df.drop('TARGET(PRICE_IN_LACS)', axis=1)
y = df['TARGET(PRICE_IN_LACS)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

"""Applying StanderScaler on numerical columns"""

numerical_cols = ['BHK_NO.', 'SQUARE_FT', 'LONGITUDE', 'LATITUDE']
scaler = StandardScaler()

X_train[numerical_cols] = scaler.fit_transform(X_train[numerical_cols])
X_test[numerical_cols] = scaler.transform(X_test[numerical_cols])

X_train.sample(5)

"""Tunning Paramenters for Random Forest Regresser Object"""

# Defining the parameter grid
param_grid = {
    'n_estimators': [20,50], # [5,7, 10, 15, 20, 50, 100] Values taken for 1st run code , Now removed some of them for simplicity
    'max_depth': [15, 20]  # [ 5, 10, 15, 20]  Values taken for 1st run code , Now removed some of them for simplicity
}

rnd_f = RandomForestRegressor(random_state=42)

# Creating a GridSearchCV object
grid_search = GridSearchCV(estimator=rnd_f, param_grid=param_grid, cv=5, scoring='r2', verbose=2)  # Using 5-fold cross-validation


# Fitting the GridSearchCV object to the training data
grid_search.fit(X_train, y_train)


# The best hyperparameters and best score
best_params = grid_search.best_params_
best_score = grid_search.best_score_

print(f"Best Hyperparameters: {best_params}")
print(f"Best Cross-Validation Score: {best_score}")

# Train the model with the best hyperparameters
best_rnd_f = RandomForestRegressor(max_depth=15,n_estimators=50, random_state=42)
best_rnd_f.fit(X_train, y_train)

# Evaluate the model on the test set
best_rnd_f_train_score = best_rnd_f.score(X_train, y_train)
print(f"Train Score with Best Hyperparameters: {best_rnd_f_train_score}")
cv_scores = cross_val_score(best_rnd_f, X_train, y_train, cv=5, scoring='r2')
print(f"Mean Cross-Validation Score: {np.mean(cv_scores)}")
best_rnd_f_test_score = best_rnd_f.score(X_test, y_test)
print(f"Test Score with Best Hyperparameters: {best_rnd_f_test_score}")

"""Train Score: 0.9432 (Very High), But
Mean Cross-Validation Score: 0.7938 (Good Stability)
### The test score is very close to the cross-validation score (0.7938), which indicates that the model is not overfitting.

# END
"""

